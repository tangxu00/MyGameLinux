#include<stdio.h>
#include<curses.h>
#include <time.h>
#include <sys/time.h>
#include<stdlib.h>
#include<signal.h>

#define WIN_HIGH 9 //雷区窗口高
#define WIN_WIDTH 9//雷区窗口宽
#define SUMBOM 2//雷数
//-------------------全局变量-----------------
int HIGH;//雷区高
int WIDTH;//宽
int SUM;//雷数
int SUMWHITE;//白格数
int WINFLAG;//胜利标志
int TIME;//游戏时间
int TIMESTART;//计时开始，1表示启动，0表示关闭
int DIFFICULTY;//游戏难度
int ch;//获取鼠标事件
MEVENT event;//鼠标事件
int MouseX,MouseY;//鼠标坐标x为行，y为列
//WINDOW *win1;//扫雷窗口

struct
{
    int num;/*1表示有雷，0表示无雷*/
    int roundnum;/*格子周围地雷数*/
    int flag;/*1表示有旗，0表示五旗־*/
    int process;//1表示已处理，0表示未处理
}Mine[50][50];//最大范围GALRM’未

//-------------------------------------------
//---------------------函数声明--------------------
void openFile();//配置文件
void init();//界面初始化
void drawFlag(int,int);//画旗
void eraseFlag(int ,int);//擦旗
void drawWhite(int,int);//画白格
void drawNum(int,int,int);//画数字
void drawBom(int,int);//画地雷
void gameBegin();//游戏开始
void mouseControl();//鼠标控制
void leftClicked(int,int);//左键点击
void leftDoubleCliked(int,int);//左键双击
void produceBom();//生成地雷
int bomStatics(int , int );//统计格子周围的雷
void showWhite(int,int);//显示白格
void showSum();//显示雷数
void showTime();//显示时间
int set_ticker(int n_msecs);	//设置定时器，单位是毫秒
//--------------------------------------------------
int main() /*=====================================Main====================*/
{
    openFile();//读取配置文件
    gameBegin();//游戏开始
    endwin();//关闭窗口
} 
/*--------游戏开始 ----------*/
void gameBegin()
{
    init();
    refresh();
    produceBom();//生成地雷
    mouseControl();//鼠标控制
}
/*-------文件配置-----------*/
void openFile()
{
    DIFFICULTY=1;
    HIGH=WIN_HIGH;
    WIDTH=WIN_WIDTH;
    SUM=SUMBOM;
    SUMWHITE=WIDTH*HIGH-SUM;
} 
/*----------初始化-----------*/
void init()
{
    initscr();//初始化
    clear();//清屏R
    noecho();//取消回显
    cbreak();//直接输出字符
    curs_set(0);// 光标隐藏
    WINFLAG=0;//点开的白格数为0
    TIME=0;//游戏时间初始化
    TIMESTART=0;//计时未启动
    mousemask(ALL_MOUSE_EVENTS,NULL);//监听鼠标事件
    mouseinterval(200);//设置单次点击鼠标间隔
   
    //-----画横线-----
    int i,j;  
    for(j=2;j<2*HIGH;j=j+2)
    {for(i=1;i<4*WIDTH;i++)
        {
            if((i%4)!=0)
            {mvaddch(j,i,'-');}
            else
            {mvaddch(j,i,'+');}
        }
    }
    //------画竖线----
    for(j=1;j<2*HIGH;j++)
    {
        for(i=4;i<4*WIDTH;i=i+4)
        {
            mvaddch(j,i,'|');
        }
    }
    //画点，表示未点开
    for(j=1;j<2*HIGH;j=j+2)
    {
        for(i=2;i<4*WIDTH;i=i+4)
        {
            mvaddch(j,i,'.');
        }
    }
    for(i=0;i<HIGH;i++)//初始化结构体
    {
        for(j=0;j<WIDTH;j++)
        {
            Mine[i][j].num=0;
            Mine[i][j].flag=0;
            Mine[i][j].roundnum=0;
            Mine[i][j].process=0;
        }
    }
    /*------显示时间雷数窗口-------*/
    //---------画编辑框----------
    
    for(i=4*WIDTH+3;i<4*WIDTH+33;i++)
        mvaddch(0,i,'*');
    for(i=4*WIDTH+3;i<4*WIDTH+33;i++)
        mvaddch(2*HIGH,i,'*');
    for(j=0;j<2*HIGH+1;j++)
        mvaddch(j,4*WIDTH+3,'*');
    for(j=0;j<2*HIGH+1;j++)
        mvaddch(j,4*WIDTH+33,'*');
    for(i=4*WIDTH+4;i<4*WIDTH+32;i++)
    {
        mvaddch((2*HIGH+1)/3,i,'*');
        mvaddch((2*HIGH+1)/3+1,i,'*');
    }
    //-------------编辑框信息-------------
    showSum();//显示剩余雷数
    showTime();//显示时间
    mvaddstr((2*HIGH+1)/3+2,4*WIDTH+4,"Version 1.1");
    mvaddstr((2*HIGH+1)/3+3,4*WIDTH+4,"Designed by The Sixth Team");
    mvaddstr((2*HIGH+1)/3+5,4*WIDTH+4,"RESTART:              'r' ");
    mvaddstr((2*HIGH+1)/3+6,4*WIDTH+4,"LEAVE:                'l' ");
    mvaddstr((2*HIGH+1)/3+7,4*WIDTH+4,"DIFFICULTY:");
    mvaddstr((2*HIGH+1)/3+8,4*WIDTH+4,"EASY:                 '1' ");
    mvaddstr((2*HIGH+1)/3+9,4*WIDTH+4,"NORMAL:               '2' ");
    mvaddstr((2*HIGH+1)/3+10,4*WIDTH+4,"HARD:                 '3' ");
    mvaddstr((2*HIGH+1)/3+11,4*WIDTH+4,"PRESS KEY TO CHOOSE LEVEL");
}

void showSum()//显示剩余雷数 
{
    char a,b;
    sprintf(&a,"%d",SUM/10);//整型转字符型 
    sprintf(&b,"%d",SUM-10*(SUM/10));//整型转字符型    
    mvaddstr((2*HIGH+1)/3/2,4*WIDTH+20,"BOM : ");
    mvaddch((2*HIGH+1)/3/2,4*WIDTH+27,a);
    mvaddch((2*HIGH+1)/3/2,4*WIDTH+28,b);
    //move((2*HIGH+1)/3/2,4*WIDTH+27);
    //printw("%d",SUM);
    refresh();
}
void showTime()//显示时间
{
    
    mvaddstr((2*HIGH+1)/3/2,4*WIDTH+6,"TIME : ");
    mvprintw((2*HIGH+1)/3/2,4*WIDTH+14,"%d",TIME);
    TIME++;
    refresh();
}
void drawFlag(int i,int j)//画旗
{
    mvaddch(2*i+1,4*j+2,'P');
    refresh();
}
void eraseFlag(int i,int j)//擦旗
{
    mvaddch(2*i+1,4*j+2,'.');
    refresh();
}
void drawWhite(int i,int j)//画白格
{
    mvaddch(2*i+1,4*j+2,' ');
    refresh();
}
void drawNum(int i,int j,int k)//画数字
{
    char a;
    sprintf(&a,"%d",k);//整型转字符型
    mvaddch(2*i+1,4*j+2,a);
    refresh();
}
void drawBom(int i,int j)//画地雷
{
    mvaddch(2*i+1,4*j+2,'@');
    refresh();
}
/*------生成地雷-------*/ 
void produceBom()
{
    srand((unsigned)time(0));//生成随机因子
    int i,j,k;
    
    for(k=0;k<SUM;k++)
    {
        i = rand() % HIGH;
        j= rand() % WIDTH ;
        if(Mine[i][j].num==1) //判断是否有雷，有雷则此次不算       
            k=k-1;	
        else 
            Mine[i][j].num=1;
    }
}
/*------统计格子周围的雷-------*/ 
int bomStatics(int i, int j)
{
    int nNUM=0;
    if((i==0)&&(j==0))/*左上角*/
    {
        if(Mine[0][1].num==1)
            nNUM++;
        if(Mine[1][0].num==1)
            nNUM++;
        if(Mine[1][1].num==1)
            nNUM++;
    }
    else
        if((i==0)&&(j==(WIDTH-1)))/*右上角*/
        {
            if(Mine[0][WIDTH-2].num==1)
                nNUM++;
            if(Mine[1][WIDTH-1].num==1)
                nNUM++;
            if(Mine[1][WIDTH-2].num==1)
                nNUM++;
        }
        else
            if((i==(HIGH-1))&&(j==0))/*左下角*/
            {
                if(Mine[HIGH-2][0].num==1)
                    nNUM++;
                if(Mine[HIGH-1][1].num==1)
                    nNUM++;
                if(Mine[HIGH-2][1].num==1)
                    nNUM++;
            }
            else
                if((i==(HIGH-1))&&(j==(WIDTH-1)))/*右下角*/
                {
                    if(Mine[HIGH-1][WIDTH-2].num==1)
                        nNUM++;
                    if(Mine[HIGH-2][WIDTH-1].num==1)
                        nNUM++;
                    if(Mine[HIGH-2][WIDTH-2].num==1)
                        nNUM++;
                }
                else if(j==0)/*第一列*/
                {
                    if(Mine[i][j+1].num==1)
                        nNUM++;
                    if(Mine[i+1][j].num==1)
                        nNUM++;
                    if(Mine[i-1][j].num==1)
                        nNUM++;
                    if(Mine[i-1][j+1].num==1)
                        nNUM++;
                    if(Mine[i+1][j+1].num==1)
                        nNUM++;
                }
                else if(j==(WIDTH-1))/*最右边一行*/
                {
                    if(Mine[i][j-1].num==1)
                        nNUM++;
                    if(Mine[i+1][j].num==1)
                        nNUM++;
                    if(Mine[i-1][j].num==1)
                        nNUM++;
                    if(Mine[i-1][j-1].num==1)
                        nNUM++;
                    if(Mine[i+1][j-1].num==1)
                        nNUM++;
                }
                else if(i==0)/*第一行*/
                {
                    if(Mine[i+1][j].num==1)
                        nNUM++;
                    if(Mine[i][j-1].num==1)
                        nNUM++;
                    if(Mine[i][j+1].num==1)
                        nNUM++;
                    if(Mine[i+1][j-1].num==1)
                        nNUM++;
                    if(Mine[i+1][j+1].num==1)
                        nNUM++;
                }
                else if(i==(HIGH-1))/*最下面一行*/
                {
                    if(Mine[i-1][j].num==1)
                        nNUM++;
                    if(Mine[i][j-1].num==1)
                        nNUM++;
                    if(Mine[i][j+1].num==1)
                        nNUM++;
                    if(Mine[i-1][j-1].num==1)
                        nNUM++;
                    if(Mine[i-1][j+1].num==1)
                        nNUM++;
                }
                else/*普通格*/
                {
                    if(Mine[i-1][j].num==1)
                        nNUM++;
                    if(Mine[i-1][j+1].num==1)
                        nNUM++;
                    if(Mine[i][j+1].num==1)
                        nNUM++;
                    if(Mine[i+1][j+1].num==1)
                        nNUM++;
                    if(Mine[i+1][j].num==1)
                        nNUM++;
                    if(Mine[i+1][j-1].num==1)
                        nNUM++;
                    if(Mine[i][j-1].num==1)
                        nNUM++;
                    if(Mine[i-1][j-1].num==1)
                        nNUM++;
                }
    return nNUM;
}
/*--------显示白格---------*/
void showWhite(int i,int j)
{
    if((Mine[i][j].flag==1)||(Mine[i][j].process==1))/*有旗或者已处理则退出*/
        return;
    Mine[i][j].roundnum=bomStatics(i,j);//统计周围雷数
    if((Mine[i][j].roundnum==0)&&(Mine[i][j].process!=1))/*未处理，周围无雷*/
    {
        drawWhite(i,j);//画白格
	WINFLAG++;
        Mine[i][j].process=1;
    }
    else
        if((Mine[i][j].roundnum!=0)&&(Mine[i][j].process!=1))/*周围有雷*/
        {
            drawNum(i,j,Mine[i][j].roundnum);
            Mine[i][j].process=1;
	    WINFLAG++;
	   
            return ;
        }
    /*8个方向递归*/
    if((i!=0)&&(Mine[i-1][j].process!=1))
        showWhite(i-1,j);
    if((i!=0)&&(j!=(WIDTH-1))&&(Mine[i-1][j+1].process!=1))
        showWhite(i-1,j+1);
    if((j!=(WIDTH-1))&&(Mine[i][j+1].process!=1))
        showWhite(i,j+1);
    if((j!=(WIDTH-1))&&(i!=(HIGH-1))&&(Mine[i+1][j+1].process!=1))
        showWhite(i+1,j+1);
    if((i!=(HIGH-1))&&(Mine[i+1][j].process!=1))
        showWhite(i+1,j);
    if((i!=(HIGH-1))&&(j!=0)&&(Mine[i+1][j-1].process!=1))
        showWhite(i+1,j-1);
    if((j!=0)&&(Mine[i][j-1].process!=1))
        showWhite(i,j-1);
    if((i!=0)&&(j!=0)&&(Mine[i-1][j-1].process!=1))
        showWhite(i-1,j-1);
}

/*------------鼠标控制--------------*/
void mouseControl()
{
    //mousemask(ALL_MOUSE_EVENTS,NULL);//监听鼠标事件
    while(1)
    {
        int i,j;//定义行列
        keypad(stdscr,true);
        ch=getch();
        if(ch==KEY_MOUSE)
        {
            if(getmouse(&event)==OK)
            {       MouseX=event.y;
                MouseY=event.x;
                if(event.bstate & BUTTON1_CLICKED)
                {
                    leftClicked(i,j);
                }
                else if(event.bstate & BUTTON1_DOUBLE_CLICKED)
                {
                    leftDoubleCliked(i,j);
                } 
            }  
        }
        else if(ch=='l')//离开游戏
        {  
            endwin();
            return ;
        }     
        else if(ch=='r')//重新开始
        {
            TIMESTART=0;
	    set_ticker(0);
            switch(DIFFICULTY)
            {
            case 1:
                HIGH=WIN_HIGH;
                WIDTH=WIN_WIDTH;
                SUM=SUMBOM;
                break;
            case 2:
                HIGH=WIN_HIGH/3*4;
                WIDTH=WIN_WIDTH/3*4;
                SUM=SUMBOM*2;
                break;
            case 3:
                HIGH=WIN_HIGH/3*5;
                WIDTH=WIN_WIDTH/3*5;
                SUM=SUMBOM*4;
                break;
            }		
            gameBegin();
        }
        else if(ch=='1')//难度选择：1为简单，2为中等 3为困难
        {
            TIMESTART=0;
	    set_ticker(0);
            DIFFICULTY=1;	        
            HIGH=WIN_HIGH;
            WIDTH=WIN_WIDTH;
            SUM=SUMBOM;
            gameBegin();
        }
        else if(ch=='2')
        {
            TIMESTART=0;
	    set_ticker(0);
	    DIFFICULTY=2;	        
            HIGH=WIN_HIGH/3*4;
            WIDTH=WIN_WIDTH/3*4;
            SUM=SUMBOM*2;
            gameBegin();
        }
        else if(ch=='3')
        {
            TIMESTART=0;
	    set_ticker(0);
	    DIFFICULTY=3;	        
            HIGH=WIN_HIGH/3*5;
            WIDTH=WIN_WIDTH/3*5;
            SUM=SUMBOM*4;
            gameBegin();
        }
    }//while
}
/*------------左键单击-----------*/
void leftClicked(int i,int j)
{
    if((MouseX>=0)&&(MouseX<=2*HIGH)&&(MouseY>=0)&&(MouseY<=4*WIDTH))
    {
        if((MouseX%2)!=0)
        {
            
            i=(MouseX-1)/2;//坐标转换
            j=MouseY/4;
            if(Mine[i][j].flag==0)//判断是否无旗
            {
                if(Mine[i][j].num==1)//判断是否有雷
                {
                    for(i=0;i<HIGH;i++)
                    {
                        for(j=0;j<WIDTH;j++)
                        {
                            Mine[i][j].process=1;//表示已处理
                            if(Mine[i][j].num==1)
                                drawBom(i,j);//画雷
                        }
                    }
                }
                else
                {   if(TIMESTART==0)
			{
			    TIMESTART=1;
                             set_ticker(1000);			
                             signal(SIGALRM,showTime);      
                         }
                    showWhite(i,j);}//显示无雷区
		     if(WINFLAG==SUMWHITE)
	             {mvaddstr((2*HIGH+1)/3/2-1,4*WIDTH+6,"success ");refresh();}
            }
        }
    }
}
/*-------------左键双击--------------*/
void leftDoubleCliked(int i,int j)
{
    if((MouseX>=0)&&(MouseX<=2*HIGH)&&(MouseY>=0)&&(MouseY<=4*WIDTH))
    {
        if((MouseX%2)!=0)
        {
            i=(MouseX-1)/2;//坐标转换
            j=MouseY/4;
            if((Mine[i][j].flag==0)&&(Mine[i][j].process==0))
            {
                drawFlag(i,j);//画旗
                Mine[i][j].flag=1;
                SUM=SUM-1;//总雷数减1
                showSum();//显示雷数
            }
            else if(Mine[i][j].flag==1)
            {
                eraseFlag(i,j);//擦旗
                Mine[i][j].flag=0;
                SUM=SUM+1;//总雷数加1
                showSum();//显示雷数
            }
        }        
    } 
}
/*------------设置定时器------------*/
int set_ticker(int n_msecs)  			//这段是借鉴的，不用太明白
{  
    struct itimerval new_timeset;  
    long n_sec, n_usecs;  
  
    n_sec = n_msecs / 1000;                 /* int second part */  
    n_usecs = (n_msecs % 1000) * 1000L;     /* microsecond part */  
  
    new_timeset.it_interval.tv_sec = n_sec; /* set reload */  
    new_timeset.it_interval.tv_usec = n_usecs;  
  
    new_timeset.it_value.tv_sec = n_sec;    /* set new ticker value */  
    new_timeset.it_value.tv_usec = n_usecs;  
  
    return setitimer(ITIMER_REAL, &new_timeset, NULL);  
}


